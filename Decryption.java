/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FYPFORMS;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.TextArea;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.awt.image.WritableRaster;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.security.Key;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JOptionPane;

/**
 *
 * @author shekhar subba limbu
 */
public class Decryption extends javax.swing.JFrame {

    /**
     * Creates new form Decryption
     */
    private static final String ALGO = "AES";
    private byte[] keyValue;

    public String stat_path = "";
    public String stat_name = "";
    public String fileName;
    public File filePath;

    public Decryption(String key) {
        keyValue = key.getBytes();
    }

    public Decryption() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ImagetxtField = new javax.swing.JLabel();
        BrowseButton = new javax.swing.JButton();
        HiddendataButton = new javax.swing.JButton();
        CiphertexttxtField = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ciphertextArea = new javax.swing.JTextArea();
        KeytxtField = new javax.swing.JLabel();
        KeytxtArea = new javax.swing.JTextField();
        DecryptButton = new javax.swing.JButton();
        PlaintextField = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        PlaintextArea = new javax.swing.JTextArea();
        SavedataButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        Pic = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Steganography and Cryptography");

        ImagetxtField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ImagetxtField.setText("SELECT THE IMAGE:");

        BrowseButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        BrowseButton.setText("BROWSE");
        BrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseButtonActionPerformed(evt);
            }
        });

        HiddendataButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        HiddendataButton.setText("GET HIDDEN DATA");
        HiddendataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HiddendataButtonActionPerformed(evt);
            }
        });

        CiphertexttxtField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CiphertexttxtField.setText("CIPHERTEXT DATA IS: ");

        ciphertextArea.setEditable(false);
        ciphertextArea.setColumns(20);
        ciphertextArea.setRows(5);
        jScrollPane1.setViewportView(ciphertextArea);

        KeytxtField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        KeytxtField.setText("ENTER THE KEY:");

        KeytxtArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KeytxtAreaActionPerformed(evt);
            }
        });

        DecryptButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        DecryptButton.setText("DECRYPT");
        DecryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecryptButtonActionPerformed(evt);
            }
        });

        PlaintextField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        PlaintextField.setText("PLAINTEXT DATA IS: ");

        PlaintextArea.setEditable(false);
        PlaintextArea.setColumns(20);
        PlaintextArea.setRows(5);
        jScrollPane2.setViewportView(PlaintextArea);

        SavedataButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        SavedataButton.setText("SAVE DATA");
        SavedataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SavedataButtonActionPerformed(evt);
            }
        });

        BackButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        BackButton.setText("BACK");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnExit.setText("EXIT");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(KeytxtField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ImagetxtField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CiphertexttxtField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PlaintextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SavedataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(KeytxtArea, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(DecryptButton))
                            .addComponent(jScrollPane2)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(BrowseButton)
                                    .addComponent(HiddendataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Pic, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1))
                        .addGap(0, 91, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(130, 130, 130)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(148, 148, 148))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(25, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BrowseButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(HiddendataButton))
                            .addComponent(Pic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(ImagetxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CiphertexttxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(KeytxtField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(KeytxtArea, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DecryptButton))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PlaintextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BackButton)
                    .addComponent(SavedataButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(btnExit)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 public ImageIcon resizePic(String picPath) {
        ImageIcon myImg = new ImageIcon(picPath);
        Image img = myImg.getImage().getScaledInstance(Pic.getWidth(), Pic.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon myPicture = new ImageIcon(img);
        return myPicture;
    }

    private void BrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser Browse = new JFileChooser();
        Browse.setCurrentDirectory(new File(System.getProperty("user.home")));
        //File extension
        FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("*,Images", "jpg", "png", "gif");
        Browse.addChoosableFileFilter(fileFilter);
        int fileState = Browse.showSaveDialog(null);

        //if the user select a file
        if (fileState == JFileChooser.APPROVE_OPTION) {
            File selectedFile = Browse.getSelectedFile();
            String path = selectedFile.getAbsolutePath();
            fileName = selectedFile.getName();
            filePath = selectedFile;

            //display the image in Jlabel using resize image
            Pic.setIcon(resizePic(path));
        } //if the user cancel
        else if (fileState == JFileChooser.CANCEL_OPTION) {
            System.out.println("No Image Selected");
        }

    }//GEN-LAST:event_BrowseButtonActionPerformed

    //Methods of decode
    public String decode(String path, String name) {
        byte[] decode;
        try {

            //user space is necessary for decrypting
            BufferedImage image = user_space(getImage(image_path(path, name, "png")));

            decode = decode_text(get_byte_data(image));

            //yo not decode garda output deko chaina ani new string garda output dexa
            System.out.println("From Decode notdecoded:: " + (decode).toString());

            //yo grda cipher text lai plain ma auxa
            System.out.println("From Decode decoded:: " + (new String(decode)).toString());
//            ciphertextArea.setText(new String(decode));

            return (new String(decode));

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null,
                    "There is no hidden message in this image!", "Error",
                    JOptionPane.ERROR_MESSAGE);

            return "";

        }

    }

    private String image_path(String path, String name, String ext) {

        return path + "/" + name + "." + ext;

    }

    private byte[] get_byte_data(BufferedImage image) {

        WritableRaster raster = image.getRaster();

        DataBufferByte buffer = (DataBufferByte) raster.getDataBuffer();
//        ciphertextArea.setText((buffer.getData().toString()));
        return buffer.getData();

    }

    private BufferedImage getImage(String f) {

        BufferedImage image = null;

        File file = new File(f);

        try {

            image = ImageIO.read(file);

        } catch (Exception ex) {

            JOptionPane.showMessageDialog(null,
                    "Image could not be read!", "Error", JOptionPane.ERROR_MESSAGE);

        }

        return image;

    }

    private byte[] decode_text(byte[] image) {

        int length = 0;

        int offset = 32;

        //loop through 32 bytes of data to determine text length
        for (int i = 0; i < 32; ++i) //i=24 will also work, as only the 4th byte contains real data
        {

            length = (length << 1) | (image[i] & 1);

        }

        byte[] result = new byte[length];

        //loop through each byte of text
        for (int b = 0; b < result.length; ++b) {

            //loop through each bit within a byte of text
            for (int i = 0; i < 8; ++i, ++offset) {

                //assign bit: [(new byte value) << 1] OR [(text byte) AND 1]
                result[b] = (byte) ((result[b] << 1) | (image[offset] & 1));

            }

        }
        //to print encoded text in image.
        System.out.println("From decode_text" + new String(result).toString());
//        ciphertextArea.setText(new String(result));
        return result;

    }

    private BufferedImage user_space(BufferedImage image) {

        //create new_img with the attributes of image
        BufferedImage new_img = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_3BYTE_BGR);

        Graphics2D graphics = new_img.createGraphics();

        graphics.drawRenderedImage(image, null);

        graphics.dispose(); //release all allocated memory for this image

        return new_img;

    }

    //button of decrypt
    private void DecryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecryptButtonActionPerformed
        // TODO add your handling code here:

        //main
        String cipherText = ciphertextArea.getText();
        String inputKey = KeytxtArea.getText();
        Decryption aes = new Decryption(inputKey);
        try {
            if (inputKey.length() != 16) {
                JOptionPane.showMessageDialog(null, "Invalid Login details", "Login Error", JOptionPane.ERROR_MESSAGE);
            } else {
                String decData = aes.decrypt(cipherText);
                PlaintextArea.setText(decData.toString());
            }

        } catch (Exception ex) {
            Logger.getLogger(EncryptionForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Unexpected error. Please check data and input correctly.");
        }

    }//GEN-LAST:event_DecryptButtonActionPerformed

    private void KeytxtAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KeytxtAreaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_KeytxtAreaActionPerformed

    public void fileWriter(File savePath, TextArea textArea) {
        try {
            BufferedWriter bf = new BufferedWriter(new FileWriter(savePath));
            bf.write(textArea.getText());
            bf.flush();
            bf.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    private void SavedataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SavedataButtonActionPerformed
        // TODO add your handling code here:
        File path = filePath;
        String stegan = JOptionPane.showInputDialog(null,
                "Enter output file name:", "File name",
                JOptionPane.PLAIN_MESSAGE);
        FileWriter fw = null;
        try {
            fw = new FileWriter("E:/check.txt", true);
            fw.write(PlaintextArea.getText());  //textArea.write(fw);

        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if (fw != null) {
//                fw.close();
            }
        }
    }//GEN-LAST:event_SavedataButtonActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        // TODO add your handling code here:
        Home home = new Home();
        home.setVisible(true);

    }//GEN-LAST:event_BackButtonActionPerformed

    public String decrypt(String encryptedData) throws Exception {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGO);
        c.init(Cipher.DECRYPT_MODE, key);
        byte[] decodedValue = Base64.getDecoder().decode(encryptedData);
        byte[] decValue = c.doFinal(decodedValue);
        String decryptedValue = new String(decValue);
        return decryptedValue;
    }

    private Key generateKey() throws Exception {
        Key key = new SecretKeySpec(keyValue, ALGO);
        return key;
    }

    private void HiddendataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HiddendataButtonActionPerformed
        // TODO add your handling code here:
        String value = JOptionPane.showInputDialog("Enter password");

        String check = String.valueOf(value);
        check = check.toLowerCase();
        check = check.trim();
        System.out.println(check);

        if (check.equals("1234")) {
            File directory = filePath;
            String image = directory.getPath();
            stat_name = directory.getName();
            stat_path = directory.getPath();
            stat_path = stat_path.substring(0, stat_path.length() - stat_name.length() - 1);
            stat_name = stat_name.substring(0, stat_name.length() - 4);

            String message = decode(stat_path, stat_name);
            System.out.println(stat_path + ", " + stat_name);
            if (message != "") {
                JOptionPane.showMessageDialog(null, "The Image was decoded Successfully!",
                        "Success!", JOptionPane.INFORMATION_MESSAGE);
                ciphertextArea.setText(message);
            } else {
                JOptionPane.showMessageDialog(null, "The Image could not be decoded!",
                        "Error!", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Incorrect Password.",
                    "Error!", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_HiddendataButtonActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Decryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Decryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Decryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Decryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Decryption().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JButton BrowseButton;
    private javax.swing.JLabel CiphertexttxtField;
    private javax.swing.JButton DecryptButton;
    private javax.swing.JButton HiddendataButton;
    private javax.swing.JLabel ImagetxtField;
    private javax.swing.JTextField KeytxtArea;
    private javax.swing.JLabel KeytxtField;
    private javax.swing.JLabel Pic;
    private javax.swing.JTextArea PlaintextArea;
    private javax.swing.JLabel PlaintextField;
    private javax.swing.JButton SavedataButton;
    private javax.swing.JButton btnExit;
    private javax.swing.JTextArea ciphertextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
