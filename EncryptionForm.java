/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FYPFORMS;

import java.awt.Image;
import java.io.BufferedReader;
import java.io.FileReader;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.security.Key;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.image.BufferedImage;
import java.io.File;
import java.awt.Graphics2D;
import java.awt.image.WritableRaster;
import java.awt.image.DataBufferByte;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author shekhar subba limbu
 */
public class EncryptionForm extends javax.swing.JFrame {

    private static final String ALGO = "AES";
    private byte[] keyValue;
    public String fileName;
    public File filePath;
    public String cipherText;

    public EncryptionForm(String key) {
        keyValue = key.getBytes();
    }

    /**
     * Creates new form EncryptionForm
     */
    public EncryptionForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TxtTextArea1 = new javax.swing.JTextArea();
        TxtKeyField = new javax.swing.JLabel();
        txtTextField = new javax.swing.JTextField();
        txtEncrypt = new javax.swing.JButton();
        txtCipherText = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtTextArea2 = new javax.swing.JTextArea();
        txtImage = new javax.swing.JLabel();
        txtBrowse2 = new javax.swing.JButton();
        txtSteg = new javax.swing.JButton();
        txtBack = new javax.swing.JButton();
        TxtPlaintext = new javax.swing.JLabel();
        txtBrowse1 = new javax.swing.JButton();
        lblPic = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Steganography and Cryptography");

        TxtTextArea1.setColumns(20);
        TxtTextArea1.setRows(5);
        jScrollPane1.setViewportView(TxtTextArea1);

        TxtKeyField.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        TxtKeyField.setText("ENTER THE KEY :");

        txtTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTextFieldActionPerformed(evt);
            }
        });
        txtTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTextFieldKeyPressed(evt);
            }
        });

        txtEncrypt.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        txtEncrypt.setText("ENCRYPT");
        txtEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEncryptActionPerformed(evt);
            }
        });

        txtCipherText.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        txtCipherText.setText("CIPHERTEXT DATA IS :");

        txtTextArea2.setEditable(false);
        txtTextArea2.setColumns(20);
        txtTextArea2.setRows(5);
        jScrollPane2.setViewportView(txtTextArea2);

        txtImage.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        txtImage.setText("SELECT THE IMAGE :");

        txtBrowse2.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        txtBrowse2.setText("BROWSE");
        txtBrowse2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBrowse2ActionPerformed(evt);
            }
        });

        txtSteg.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        txtSteg.setText("STEGANOGRAQPHY");
        txtSteg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStegActionPerformed(evt);
            }
        });

        txtBack.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        txtBack.setText("BACK");
        txtBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBackActionPerformed(evt);
            }
        });

        TxtPlaintext.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        TxtPlaintext.setText("ENTER THE PLAIN TEXT :");

        txtBrowse1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        txtBrowse1.setText("BROWSE");
        txtBrowse1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBrowse1ActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnExit.setText("EXIT");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(TxtPlaintext, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtCipherText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(TxtKeyField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtImage, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(txtTextField)
                                .addGap(18, 18, 18)
                                .addComponent(txtEncrypt))
                            .addComponent(jScrollPane1))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtBrowse1)
                            .addComponent(lblPic, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnExit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSteg, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                        .addComponent(txtBrowse2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtBack, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TxtPlaintext))
                    .addComponent(txtBrowse1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(TxtKeyField)
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEncrypt))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(txtCipherText))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblPic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtBrowse2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtSteg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExit)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBackActionPerformed
        // for exiting the program
        Home home = new Home();
        this.hide();
        home.setVisible(true);
    }//GEN-LAST:event_txtBackActionPerformed

    private void txtBrowse1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBrowse1ActionPerformed
        // TODO add your handling code here:
        JFileChooser file = new JFileChooser();
        file.showOpenDialog(null);
        File Action = file.getSelectedFile();
        String filename = Action.getAbsolutePath();

        //opening the path and dialouge from the application declaring a file where to get the selected file name and then declaring a string to get the path of the file.
        try {
            FileReader reader = new FileReader(filename);
            BufferedReader buffer = new BufferedReader(reader);
            TxtTextArea1.read(buffer, null);
            buffer.close();
            TxtTextArea1.requestFocus();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        //to read a text file we have to make a try catch block

    }//GEN-LAST:event_txtBrowse1ActionPerformed

    private void txtEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEncryptActionPerformed
        // TODO add your handling code here:
        String textPlain = TxtTextArea1.getText();
        String inputKey = txtTextField.getText();
        EncryptionForm aes = new EncryptionForm(inputKey);
        try {
            if (inputKey.length() != 16) {
                JOptionPane.showMessageDialog(null, "Invalid Login details", "Login Error", JOptionPane.ERROR_MESSAGE);
            } else {
                String encData = aes.encrypt(textPlain);
                txtTextArea2.setText(encData.toString());
                cipherText = encData;
            }

        } catch (Exception ex) {
            Logger.getLogger(EncryptionForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Unexpected error. Please check data and input correctly.");
        }

    }//GEN-LAST:event_txtEncryptActionPerformed

    public ImageIcon resizePic(String picPath) {
        ImageIcon myImg = new ImageIcon(picPath);
        Image img = myImg.getImage().getScaledInstance(lblPic.getWidth(), lblPic.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon myPicture = new ImageIcon(img);
        return myPicture;
    }

    private void txtBrowse2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBrowse2ActionPerformed
        // TODO add your handling code here:
        JFileChooser Browse = new JFileChooser();
        Browse.setCurrentDirectory(new File(System.getProperty("user.home")));
        //File extension
        FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("*,Images", "jpg", "png");
        Browse.addChoosableFileFilter(fileFilter);
        int fileState = Browse.showSaveDialog(null);

        //if the user select a file
        if (fileState == JFileChooser.APPROVE_OPTION) {
            File selectedFile = Browse.getSelectedFile();
            String path = selectedFile.getAbsolutePath();
            fileName = selectedFile.getName();
            filePath = selectedFile;

            //display the image in Jlabel using resize image
            lblPic.setIcon(resizePic(path));
        } //if the user cancel
        else if (fileState == JFileChooser.CANCEL_OPTION) {
            System.out.println("No Image Selected");
        }
    }//GEN-LAST:event_txtBrowse2ActionPerformed

    /*
    *
    *
    Methods for encode
    *
    *
     */
    public boolean encode(String path, String original, String ext1, String stegan, String message) {
        String file_name = image_path(path, original, ext1);
        BufferedImage image_orig = getImage(file_name);
        //user space is not necessary for Encrypting
        BufferedImage image = user_space(image_orig);

        image = add_text(image, message);

        return (setImage(image, new File(image_path(path, stegan, "png")), "png"));
    }

    private String image_path(String path, String name, String ext) {
        return path + "/" + name + "." + ext;
    }

    private BufferedImage getImage(String f) {
        BufferedImage image = null;
        File file = new File(f);
        try {
            image = ImageIO.read(file);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Image could not be read!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        return image;
    }

    private BufferedImage user_space(BufferedImage image) {
        //create new_img with the attributes of image
        BufferedImage new_img = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_3BYTE_BGR);
        Graphics2D graphics = new_img.createGraphics();
        graphics.drawRenderedImage(image, null);
        graphics.dispose(); //release all allocated memory for this image
        return new_img;
    }

    private BufferedImage add_text(BufferedImage image, String text) {
        //convert all items to byte arrays: image, message, message length
        byte img[] = get_byte_data(image);
        System.out.println("byte img:" + (img).toString());
        byte msg[] = text.getBytes();
        System.out.println("byte msg:" + (msg).toString());

        byte len[] = bit_conversion(msg.length);
        try {
            encode_text(img, len, 0); //0 first positiong
            System.out.println("img len 0: " + encode_text(img, len, 0));
            encode_text(img, msg, 32); //4 bytes of space for length: 4bytes*8bit = 32 bits
            System.out.println("img msg 32: " + encode_text(img, msg, 32));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,
                    "Target File cannot hold message!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        return image;

    }

    private boolean setImage(BufferedImage image, File file, String ext) {
        try {
            file.delete(); //delete resources used by the File
            ImageIO.write(image, ext, file);
            return true;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,
                    "File could not be saved!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    private byte[] get_byte_data(BufferedImage image) {
        WritableRaster raster = image.getRaster();
        DataBufferByte buffer = (DataBufferByte) raster.getDataBuffer();
        return buffer.getData();
    }

    private byte[] bit_conversion(int i) {
        //originally integers (ints) cast into bytes
        //byte byte7 = (byte)((i & 0xFF00000000000000L) >>> 56);
        //byte byte6 = (byte)((i & 0x00FF000000000000L) >>> 48);
        //byte byte5 = (byte)((i & 0x0000FF0000000000L) >>> 40);
        //byte byte4 = (byte)((i & 0x000000FF00000000L) >>> 32);
        //only using 4 bytes
        byte byte3 = (byte) ((i & 0xFF000000) >>> 24); //0
        byte byte2 = (byte) ((i & 0x00FF0000) >>> 16); //0
        byte byte1 = (byte) ((i & 0x0000FF00) >>> 8); //0
        byte byte0 = (byte) ((i & 0x000000FF));
        //{0,0,0,byte0} is equivalent, since all shifts >=8 will be 0
        System.out.println((new byte[]{byte3, byte2, byte1, byte0}).toString());
        return (new byte[]{byte3, byte2, byte1, byte0});

    }

    private byte[] encode_text(byte[] image, byte[] addition, int offset) {
        //check that the data + offset will fit in the image
        if (addition.length + offset > image.length) {
            throw new IllegalArgumentException("File not long enough!");
        }
        //loop through each addition byte
        for (int i = 0; i < addition.length; ++i) {
            //loop through the 8 bits of each byte
            int add = addition[i];
            for (int bit = 7; bit >= 0; --bit, ++offset) //ensure the new offset value carries on through both loops
            {
                //assign an integer to b, shifted by bit spaces AND 1
                //a single bit of the current byte
                int b = (add >>> bit) & 1;
                //assign the bit by taking: [(previous byte value) AND 0xfe] OR bit to add
                //changes the last bit of the byte in the image to be the bit of addition
                image[offset] = (byte) ((image[offset] & 0xFE) | b);
            }
        }
        return image;
    }

    //method for button clicked of encryption
    private void txtStegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStegActionPerformed
        // TODO add your handling code here:
        String value = JOptionPane.showInputDialog("Enter password");
        String check = String.valueOf(value);
        check = check.toLowerCase();
        check = check.trim();
        System.out.println(check);

        if (check.equals("1234")) {
            String text = TxtTextArea1.getText();
            String key = txtTextField.getText();
            String cipherText = txtTextArea2.getText();
            File directory = filePath;
            String path = directory.getPath();
            String name = fileName;
            String ext = Image_Filter.getExtension(directory);

            path = path.substring(0, path.length() - name.length() - 1);
            name = name.substring(0, name.length() - 4);

            String stegan = JOptionPane.showInputDialog(null,
                    "Enter output file name:", "File name",
                    JOptionPane.PLAIN_MESSAGE);

            if (encode(path, name, ext, stegan, cipherText)) {
                JOptionPane.showMessageDialog(null, "The Image was encoded!",
                        "Success!", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "The Image could not be encoded!",
                        "Error!", JOptionPane.INFORMATION_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Incorrect Password.",
                    "Error!", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_txtStegActionPerformed

    private void txtTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTextFieldKeyPressed
        // TODO add your handling code here:
        String valuee = txtTextField.getText();
        int l = valuee.length();
        if ((evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9') || evt.getKeyCode() == 8 || evt.getKeyCode() == 39 || evt.getKeyCode() == 37 || evt.getKeyCode() == 39 || evt.getKeyCode() == 35 || evt.getKeyCode() == 36) {
            txtTextField.setEditable(true);
        } else {
            txtTextField.setEditable(false);

        }
    }//GEN-LAST:event_txtTextFieldKeyPressed

    private void txtTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTextFieldActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    /* New ALgo */
    public String encrypt(String Data) throws Exception {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGO);
        c.init(Cipher.ENCRYPT_MODE, key);
        byte[] encVal = c.doFinal(Data.getBytes());
        String encryptedValue = Base64.getEncoder().encodeToString(encVal);
        return encryptedValue;
    }

    public String decrypt(String encryptedData) throws Exception {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGO);
        c.init(Cipher.DECRYPT_MODE, key);
        byte[] decodedValue = Base64.getDecoder().decode(encryptedData);
        byte[] decValue = c.doFinal(decodedValue);
        String decryptedValue = new String(decValue);
        return decryptedValue;
    }

    private Key generateKey() throws Exception {
        Key key = new SecretKeySpec(keyValue, ALGO);
        return key;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EncryptionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EncryptionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EncryptionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EncryptionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EncryptionForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TxtKeyField;
    private javax.swing.JLabel TxtPlaintext;
    private javax.swing.JTextArea TxtTextArea1;
    private javax.swing.JButton btnExit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblPic;
    private javax.swing.JButton txtBack;
    private javax.swing.JButton txtBrowse1;
    private javax.swing.JButton txtBrowse2;
    private javax.swing.JLabel txtCipherText;
    private javax.swing.JButton txtEncrypt;
    private javax.swing.JLabel txtImage;
    private javax.swing.JButton txtSteg;
    private javax.swing.JTextArea txtTextArea2;
    private javax.swing.JTextField txtTextField;
    // End of variables declaration//GEN-END:variables

}
